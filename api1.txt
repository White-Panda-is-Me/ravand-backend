route = /auth/signup
code = 200 => okay
code = 409 => user exists
req.body = {
    email: string
}
res = {token: "the token..."}


route = /auth/singup/f
code = 200 => okay
code = 404 => user not Found
code = 403 => verification code doesn't match
req.body = {
    password: string, // password for account
    token: string, // the uuid
    ipass: string, // the verification code
    fn: string, // first name 
    ln: string, // last name 
}
res = {jwt: "the jwt..."}


route = /auth/signin
code = 200 => okay
code = 404 => user doesn't exist
code = 403 => password doesn't match
req.body = {
    email: string,
    password: string
}
res = {jwt: "the jwt..."}


route = /users/me
code = 200 => okay
header = Authorization required
res = {
    email,
    id,
    createdAt,
    updatedAt,
    fname,
    lname,
}


route = /users/edit
code = 200 => okay
header = Authorization required
req.body = {
    fn,
    ln
    // NOTE = both are optional
}



route = /plan/create
code = 200 => okay
header = Authorization required
req.body = {
    blocked : [{name: string ,start: string ,end: string}],
    tasks : [{name ,imp ,min ,score = null // Score is always null}]
    start: string,
    end: string,
}
res = sorted_tasks: [{}]